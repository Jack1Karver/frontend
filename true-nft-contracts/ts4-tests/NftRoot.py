"""
    This file was generated by TONDev.
    TONDev is a part of TON OS (see http://ton.dev).
"""
from tonos_ts4 import ts4
from tonos_ts4.address import Address
from tonos_ts4.util import str2bytes


def test():
    # Place your code of the test here
    clientAddress = Address(
        '0:c4a31362f0dd98a8cc9282c2f19358c888dfce460d93adb395fa138d61ae5069')
    newNftItem = nftRootContract1.call_method('mint', {'_author': clientAddress, '_name': str2bytes(
        'Name'), '_authorName': str2bytes('Author'), '_url': str2bytes('url'), '_fieldsValues': []}, rootKeyPair[0])

    newNftItem2 = nftRootContract2.call_method('mint', {'_author': clientAddress, '_name': str2bytes(
        'Name'), '_authorName': str2bytes('Author'), '_url': str2bytes('url'), '_fieldsValues': [str2bytes('11'), str2bytes('FCB')]}, rootKeyPair[0])
    print(newNftItem)
    print('Ok')


if __name__ == '__main__':
    # Initialize TS4 by specifying where the artifacts of the used contracts are located
    # verbose: toggle to print additional execution info
    ts4.init('../new-contracts-compiled/', verbose=True)

    rootKeyPair = ts4.make_keypair()
    nftDataCode = ts4.load_code_cell('NftData')
    nftIndexCode = ts4.load_code_cell('Nft')

    tokenName1 = ts4.str2bytes("TestToken")
    tokenSymbol1 = ts4.str2bytes("TST")

    nftRootContract1 = ts4.BaseContract(
        'NftRoot',
        dict(
            _codeNft=nftIndexCode, _codeNftData=nftDataCode, _name=tokenName1, _symbol=tokenSymbol1,
            _fieldsNames=[], _managersList=[], _pubkey=rootKeyPair[1]
        ),
        keypair=rootKeyPair
    )
    nftRootContract2 = ts4.BaseContract(
        'NftRoot',
        dict(
            _codeNft=nftIndexCode, _codeNftData=nftDataCode, _name=tokenName1, _symbol=tokenSymbol1,
            _fieldsNames=[str2bytes('number'), str2bytes('team')], _managersList=[], _pubkey=rootKeyPair[1]
        ),
        keypair=rootKeyPair
    )

    test()
